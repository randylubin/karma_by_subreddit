h1 karma!

div#viz
div#chart

div
	- var subreddits = {}
	- var userinfoObject = {"children":[]}
	- var links = 0
	- var linkVotes = 0
	- var comments = 0
	- var commentVotes = 0
	- for child in info
		- var votes = (child.data.ups - child.data.downs)
		- if (subreddits[child.data.subreddit])
			- subreddits[child.data.subreddit] += votes
		- else
			- subreddits[child.data.subreddit] = votes
		- if (child.kind == 't3')
			- links += 1
			- linkVotes += votes
		- else
			- comments += 1
			- commentVotes += votes

	h3 Total Links: #{links} with #{linkVotes} votes
	h3 Total Comments: #{comments} with #{commentVotes} votes

	each votes, subreddit in subreddits
		- userinfoObject.children.push({"name":subreddit,"size":votes})
		p= subreddit + ' has ' + votes + ' votes'
	-console.log(userinfoObject)

	script
		var userinfoObject = 
		{
			"children": [		   
				{"name": "AgglomerativeCluster", "size": 3938},
				{"name": "CommunityStructure", "size": 3812},
				{"name": "HierarchicalCluster", "size": 6714},
				{"name": "MergeEdge", "size": 743}
			]
		}
	-console.log(userinfoObject)
script
	var r = 960,
		format = d3.format(",d"),
		fill = d3.scale.category20c();

	var bubble = d3.layout.pack()
		.sort(null)
		.size([r, r]);

	var vis = d3.select("#chart").append("svg")
		.attr("width", r)
		.attr("height", r)
		.attr("class", "bubble");

	var runJSON = function(userinfoObject) {
		console.log("running");
		var node = vis.selectAll("g.node")
		.data(bubble.nodes(classes(userinfoObject))
		.filter(function(d) { return !d.children; }))
		.enter().append("g")
		.attr("class", "node")
		.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

	node.append("title")
		.text(function(d) { return d.className + ": " + format(d.value); });

	node.append("circle")
		.attr("r", function(d) { return d.r; })
		.style("fill", function(d) { return fill(d.packageName); });

	node.append("text")
		.attr("text-anchor", "middle")
		.attr("dy", ".3em")
		.text(function(d) { return d.className.substring(0, d.r / 3); });
	};

	// Returns a flattened hierarchy containing all leaf nodes under the root.
	function classes(root) {
		var classes = [];

		function recurse(name, node) {
			if (node.children){
				node.children.forEach(function(child) { recurse(node.name, child); });
			}
			else classes.push({packageName: name, className: node.name, value: node.size});
			}

			recurse(null, root);
			return {children: classes};
	}
	console.log(userinfoObject)
	runJSON(userinfoObject);
